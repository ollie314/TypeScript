=== tests/cases/conformance/controlFlow/controlFlowDoWhileStatement.ts ===
let cond: boolean;
>cond : boolean

function a() {
>a : () => void

    let x: string | number;
>x : string | number

    x = "";
>x = "" : string
>x : string | number
>"" : string

    do {
        x; // string
>x : string

    } while (cond)
>cond : boolean
}
function b() {
>b : () => void

    let x: string | number;
>x : string | number

    x = "";
>x = "" : string
>x : string | number
>"" : string

    do {
        x; // string
>x : string

        x = 42;
>x = 42 : number
>x : string | number
>42 : number

        break;
    } while (cond)
>cond : boolean
}
function c() {
>c : () => void

    let x: string | number;
>x : string | number

    x = "";
>x = "" : string
>x : string | number
>"" : string

    do {
        x; // string
>x : string

        x = undefined;
>x = undefined : undefined
>x : string | number
>undefined : undefined

        if (typeof x === "string") continue;
>typeof x === "string" : boolean
>typeof x : string
>x : string | number
>"string" : "string"

        break;
    } while (cond)
>cond : boolean
}
function d() {
>d : () => void

    let x: string | number;
>x : string | number

    x = 1000;
>x = 1000 : number
>x : string | number
>1000 : number

    do {
        x; // number
>x : number

        x = "";
>x = "" : string
>x : string | number
>"" : string

    } while (x = x.length)
>x = x.length : number
>x : string | number
>x.length : number
>x : string
>length : number

    x; // number
>x : number
}
function e() {
>e : () => void

    let x: string | number;
>x : string | number

    x = "";
>x = "" : string
>x : string | number
>"" : string

    do {
        x = 42;
>x = 42 : number
>x : string | number
>42 : number

    } while (cond)
>cond : boolean

    x; // number
>x : number
}
function f() {
>f : () => void

    let x: string | number | boolean | RegExp | Function;
>x : string | number | boolean | Function | RegExp
>RegExp : RegExp
>Function : Function

    x = "";
>x = "" : string
>x : string | number | boolean | Function | RegExp
>"" : string

    do {
        if (cond) {
>cond : boolean

            x = 42;
>x = 42 : number
>x : string | number | boolean | Function | RegExp
>42 : number

            break;
        }
        if (cond) {
>cond : boolean

            x = true;
>x = true : boolean
>x : string | number | boolean | Function | RegExp
>true : boolean

            continue;
        }
        x = /a/;
>x = /a/ : RegExp
>x : string | number | boolean | Function | RegExp
>/a/ : RegExp

    } while (cond)
>cond : boolean

    x; // number | boolean | RegExp
>x : number | boolean | RegExp
}
function g() {
>g : () => void

    let x: string | number | boolean | RegExp | Function;
>x : string | number | boolean | Function | RegExp
>RegExp : RegExp
>Function : Function

    x = "";
>x = "" : string
>x : string | number | boolean | Function | RegExp
>"" : string

    do {
        if (cond) {
>cond : boolean

            x = 42;
>x = 42 : number
>x : string | number | boolean | Function | RegExp
>42 : number

            break;
        }
        if (cond) {
>cond : boolean

            x = true;
>x = true : boolean
>x : string | number | boolean | Function | RegExp
>true : boolean

            continue;
        }
        x = /a/;
>x = /a/ : RegExp
>x : string | number | boolean | Function | RegExp
>/a/ : RegExp

    } while (true)
>true : boolean

    x; // number
>x : number
}

