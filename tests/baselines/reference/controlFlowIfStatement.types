=== tests/cases/conformance/controlFlow/controlFlowIfStatement.ts ===
let x: string | number | boolean | RegExp;
>x : string | number | boolean | RegExp
>RegExp : RegExp

let cond: boolean;
>cond : boolean

x = /a/;
>x = /a/ : RegExp
>x : string | number | boolean | RegExp
>/a/ : RegExp

if (x /* RegExp */, (x = true)) {
>x /* RegExp */, (x = true) : boolean
>x : RegExp
>(x = true) : boolean
>x = true : boolean
>x : string | number | boolean | RegExp
>true : boolean

    x; // boolean
>x : true

    x = "";
>x = "" : string
>x : string | number | boolean | RegExp
>"" : string
}
else {
    x; // boolean
>x : boolean

    x = 42;
>x = 42 : number
>x : string | number | boolean | RegExp
>42 : number
}
x; // string | number
>x : string | number

function a() {
>a : () => void

    let x: string | number;
>x : string | number

    if (cond) {
>cond : boolean

        x = 42;
>x = 42 : number
>x : string | number
>42 : number
    }
    else {
        x = "";
>x = "" : string
>x : string | number
>"" : string

        return;
    }
    x; // number
>x : number
}
function b() {
>b : () => void

    let x: string | number;
>x : string | number

    if (cond) {
>cond : boolean

        x = 42;
>x = 42 : number
>x : string | number
>42 : number

        throw "";
>"" : string
    }
    else {
        x = "";
>x = "" : string
>x : string | number
>"" : string
    }
    x; // string
>x : string
}
function c<T>(data: string | T): T {
>c : <T>(data: string | T) => T
>T : T
>data : string | T
>T : T
>T : T

    if (typeof data === 'string') {
>typeof data === 'string' : boolean
>typeof data : string
>data : string | T
>'string' : "string"

        return JSON.parse(data);
>JSON.parse(data) : any
>JSON.parse : (text: string, reviver?: (key: any, value: any) => any) => any
>JSON : JSON
>parse : (text: string, reviver?: (key: any, value: any) => any) => any
>data : string
    }
    else {
        return data;
>data : T
    }
}
function d<T extends string>(data: string | T): never {
>d : <T extends string>(data: string | T) => never
>T : T
>data : string | T
>T : T

    if (typeof data === 'string') {
>typeof data === 'string' : boolean
>typeof data : string
>data : string | T
>'string' : "string"

        throw new Error('will always happen');
>new Error('will always happen') : Error
>Error : ErrorConstructor
>'will always happen' : string
    }
    else {
        return data;
>data : never
    }
}

